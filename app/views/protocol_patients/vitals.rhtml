<style>

#tt_page_select_vital_signs .inputFrameClass {
  height: 495px;
}

#tt_page_select_vital_signs .options {
  height: 19em;
}

#tt_page_life_threatening_condition .inputFrameClass {
  height: 480px;
}

#tt_page_life_threatening_condition .options {
  height: 17em;
}



#tt_page_select_triage_category .inputFrameClass {
  height: 11em;
}

#tt_page_select_triage_category .options {
  height: 17em;
}

/* ................................ */

#summary_container {
    bottom: 124px;
    font-size: 20px;
    left: 25px;
    position: absolute;
    z-index: 600;
    border-radius: 10px 10px 10px 10px;
    width: 47.2em;
    border-style: solid;
    border-width: 1px;
    background-color: lightgrey;
    display: none;
    -moz-user-select: none;
    height: 18em;
    overflow: auto;
  }

  .summary {
    font-size: 27px;
    padding-left: 15px;
  }

  .data {
    color: black;
    font-size: 25px;
  }

  .header {
    font-size: 27px;
    color: white;
    padding-left: 30px;
    border-style: solid;
    border-width: 0px 0px 1px 0px;
  }

</style>

<script>
    tt_cancel_show = '/patients/show/<%= @patient.id %>?user_id=<%= @user.id %>';
  tt_cancel_destination = '/patients/show/<%= @patient.id %>?user_id=<%= @user.id %>';
  var currentBmi;
  var currentWeight;
  var currentHeight;
  var currentHeightPercentile;
  var currentWeightPercentile;
  var displayText;
  var medianWeightHeight;

  function getSelected(){
    var choices = "";

    for(var o = 0; o < __$('choice').options.length; o++){
      if(__$('choice').options[o].selected == true){
        choices += __$('choice').options[o].innerHTML + " ";
      }
    }

    return choices;
  }

  function getComplaints(){
    var complaints = "";

    for(var o = 0; o < $('multiple').options.length; o++){
      if($('multiple').options[o].selected == true){
        complaints += $('multiple').options[o].innerHTML + " ";
      }
    }

    return complaints;
  }

  function calculateBP(pos){
    var bp;

    if(!$('bp')){
      var div = document.createElement("div");
      div.id = "bp";
      div.className = "statusLabel";

      $("inputFrame" + tstCurrentPage).appendChild(div);
    }

    if(pos == 1){
      bp = ($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 ? $("touchscreenInput" +
        tstCurrentPage).value.trim() : "?") +
        "/" + ($("diastolic_blood_pressure").value.trim().length > 0 ? $("diastolic_blood_pressure").value.trim() : "?");
    } else if(pos == 2){
      bp = ($("systolic_blood_pressure").value.trim().length > 0 ? $("systolic_blood_pressure").value.trim() : "?") +
        "/" + ($("touchscreenInput" + tstCurrentPage).value.trim().length > 0 ? $("touchscreenInput" +
        tstCurrentPage).value.trim() : "?");
    }
	
    $("bp").innerHTML = "Blood Pressure: <i style='font-size: 1.2em; float: right;'>" + bp + "</i>";

    timedEvent = setTimeout('calculateBP(' + pos + ')', 500);
  }



  /* starts */


   function showSelectedConditions() {
      var conditions = [];

      if ($('weight').value.length > 0)
        conditions.push("Weight: " + $('weight').value);


      if ($('temperature').value.length > 0)
        conditions.push("Temperature: " + $('temperature').value);

      if($('systolic_blood_pressure').value.length > 0 && $('diastolic_blood_pressure').value.length > 0){
        conditions.push("BP: " + $('systolic_blood_pressure').value +"/"+ $('diastolic_blood_pressure').value);
      }

      if ($('respiratory_rate').value.length > 0)
        conditions.push("Respiratory rate: " + $('respiratory_rate').value);

      if ($('pulse').value.length > 0)
        conditions.push("Pulse: " + $('pulse').value);

      if ($('oxygen').value.length > 0)
        conditions.push("Oxygen: " + $('oxygen').value);

      if ($('waist_circumference').value.length > 0)
        conditions.push("Waist Circumference: " + $('waist_circumference').value);



      //var container = $("summary_container");
      var html 
      html = "<ul>"
      for(var i=0;i < conditions.length;i++) {
        if (conditions[i].length > 0)
          html += "<li class='data'>" + conditions[i] + "</li>";

      }
      html += "</ul>"
	  $('inputFrame'+tstCurrentPage).innerHTML = '<div id="summary">' + html + '</div>' ;
	  $("clearButton").style.display = "none";
  }

    function selectTriageCategory(category) {
      var options = document.getElementsByTagName("li");
      for(var i = 0; i < options.length; i++){
        if(options[i].innerHTML == category){
          updateTouchscreenInputForSelect(options[i]);
          break
        }
      }
    }


    function triage() {

      if ($('temperature').value.length > 0) {
        temp = parseFloat($('temperature').value);
        if (temp > 40 || temp < 34) {
          return 'EMERGENCY'
        }
      }

      /*if ($('temperature').length > 0) {
        temp = parseFloat($('temperature').value);
        if (temp > 40 || temp < 34) {
          return 'EMERGENCY'
        }
      }*/

      if($('systolic_blood_pressure').value.length > 0){
        sbp = parseFloat($('systolic_blood_pressure').value);
        if (sbp > 220 || sbp < 80) {
          return 'EMERGENCY'
        }
      }

      if($('diastolic_blood_pressure').value.length > 0){
        dbp = parseFloat($('diastolic_blood_pressure').value);
        if (dbp > 130) {
          return 'EMERGENCY'
        }
      }

      if($('respiratory_rate').value.length > 0){
        respiratory_rate = parseFloat($('respiratory_rate').value);
        if (respiratory_rate > 30 || respiratory_rate < 8) {
          return 'EMERGENCY'
        }
      }

      if($('pulse').value.length > 0){
        pulse = parseFloat($('pulse').value);
        if (pulse > 130 || pulse < 40) {
          return 'EMERGENCY'
        }
      }

      if($('oxygen').value.length > 0){
        oxygen = parseFloat($('oxygen').value);
        if (oxygen < 90) {
          return 'EMERGENCY'
        }
      }

      if($('life threatening condition').value.length > 0){
        ltc = $('life threatening condition').value;
        if (ltc != 'None' && ltc != 'Other') {
          return 'EMERGENCY'
        }
      }


      /*  ..................... */



      if ($('temperature').value.length > 0) {
        temp = parseFloat($('temperature').value);
        if (temp > 38 || temp < 35.5) {
          return 'PRIORITY'
        }
      }

      /*if ($('temperature').length > 0) {
        temp = parseFloat($('temperature').value);
        if (temp > 40 || temp < 34) {
          return 'EMERGENCY'
        }
      }*/

      if($('systolic_blood_pressure').value.length > 0){
        sbp = parseFloat($('systolic_blood_pressure').value);
        if (sbp > 180 || sbp < 90) {
          return 'PRIORITY'
        }
      }

      if($('diastolic_blood_pressure').value.length > 0){
        dbp = parseFloat($('diastolic_blood_pressure').value);
        if (dbp > 110) {
          return 'PRIORITY'
        }
      }

      if($('respiratory_rate').value.length > 0){
        respiratory_rate = parseFloat($('respiratory_rate').value);
        if (respiratory_rate > 20 || respiratory_rate < 12) {
          return 'PRIORITY'
        }
      }

      if($('pulse').value.length > 0){
        pulse = parseFloat($('pulse').value);
        if (pulse > 110 || pulse < 50) {
          return 'PRIORITY'
        }
      }

      if($('oxygen').value.length > 0){
        oxygen = parseFloat($('oxygen').value);
        if (oxygen < 92) {
          return 'PRIORITY'
        }
      }


     /* .......................... */






      for(var i=0;i < selected_complaints.length;i++) {
        if (selected_complaints[i] == 'Snike bite (Bites)')
          return 'EMERGENCY'

        if (selected_complaints[i] == 'Major (Burns)')
          return 'EMERGENCY'

        if (selected_complaints[i] == 'Snake bite (Bites)')
          return 'EMERGENCY'

        if (selected_complaints[i] == 'PV bleeding (Pregnancy)')
          return 'EMERGENCY'

        if (selected_complaints[i] == 'Major (Trauma)')
          return 'EMERGENCY'

        if (selected_complaints[i] == 'Violent behaviour')
          return 'EMERGENCY'

        if (selected_complaints[i] == 'Severe (Shortness of breath)')
          return 'EMERGENCY'

      }

      for(var i=0;i < selected_complaints.length;i++) {
        //alert(selected_complaints[i])
        if (selected_complaints[i] == 'Active bleeding')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Chest pain')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Focal neurologic deficit')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Lower limb (Fracture)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Pelvis limb (Fracture)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Rib (Fracture)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Skull (Fracture)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Spine (Fracture)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Upper limb (Fracture)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Severe (Head injury)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Unconscious (Head injury)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Medication history (Convulsions)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Minor (Burns)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Iron posioning (Poisioning)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Organophosphate posioning (Poisioning)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Other (Poisioning)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Paraffin (Poisioning)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Abdominal pain (Pregnancy)')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Pain')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Sexual assualt')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Visual changes')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Body swelling')
          return 'PRIORITY'

        if (selected_complaints[i] == 'Weakness')
          return 'PRIORITY'

      }



      return 'QUEUE';
    }


    var selected_complaints = [];

    function unLoadSelectedComplaints() {
      selected_complaints = [];
    }

    function LoadSelectedComplaints() {
      complaints = $('touchscreenInput'+tstCurrentPage).value.split(';');
      for(var i = 0 ; i < complaints.length; i++) {
        selected_complaints.push(complaints[i]);
      }
    }

  /* end */


   jQuery.noConflict();

  function $(e) {
    return document.getElementById(e);
  }

  function growthIndicators(){
     //These values pulled from the tt_onLoad bit in the third form...
     try{
      currentHeight = document.getElementById('height').value;
     }catch(e){
      currentHeight = <%= @current_height %>
     }
     currentWeight = document.getElementById('weight').value;
     medianWeightHeight = [<%= WeightHeightForAge.median_weight_height(@patient_bean.age_in_months, @patient.person.gender).join(',') rescue nil -%>];
     currentWeightPercentile = (currentWeight/(medianWeightHeight[0])*100).toFixed(0);
     currentHeightPercentile = (currentHeight/(medianWeightHeight[1])*100).toFixed(0);
     if (('<%= @patient_bean.age %>') > 14) {
       showBMI();
     } else {
       showWeightHeightForAge();
       showWeightForHeight();
     }
     document.getElementById('inputFrame'+tstCurrentPage).innerHTML = '<div id="summary">' + displayText + '</div><div id="charts" style="height:185px;margin:2px 6px 6px;padding:2px;width:380px;"></div>' ;
     jQuery('#charts').empty().load('/patients/graph/<%= @patient.id -%>?data=weight&currentWeight=' + currentWeight);
   }

  function showWeightHeightForAge(){
    document.getElementById('weight_for_age').value = currentWeightPercentile;
    document.getElementById('height_for_age').value = currentHeightPercentile;

    displayText = "<div><span class='title'>Weight for age:</span>";
    if (currentWeightPercentile >= 80){
      displayText += "<span class='goodWeightForAge'>" + currentWeightPercentile + "%</span><br>";
    } else if (currentWeightPercentile >= 75) {
      displayText += "<span class='medWeightForAge'>" + currentWeightPercentile + "%</span>" + " <span class='recommendation'> Moderate wasting </span><br>";
    } else {
      displayText += "<span class='lowWeightForAge'>" + currentWeightPercentile + "%</span>" + " <span class='recommendation'> Severe wasting</span><br>";
    }
    displayText += "</div>";

    displayText += "<div><span class='title'>Height for age:</span>";
    if (currentHeightPercentile >= 80){
      displayText += "<span class='goodHeightForAge'>" + currentHeightPercentile + "%</span><br>";
    } else if (currentHeightPercentile >= 75) {
      displayText += "<span class='medHeightForAge'>" + currentHeightPercentile + "%</span>" + " <span class='recommendation'> Moderate stunted growth </span><br>";
    } else {
      displayText += "<span class='lowHeightForAge'>" + currentHeightPercentile + "%</span>" + " <span class='recommendation'> Severe stunted growth </span><br>";
    }
    displayText += "</div>";

  }

  function showWeightForHeight() {
    var currentHeightRounded = (currentHeight % Math.floor(currentHeight) < 0.5 ? 0 : 0.5) + Math.floor(currentHeight);
    var weightForHeights = <%= WeightForHeight.patient_weight_for_height_values.to_json -%>;
    var medianWeightHeight = weightForHeights[currentHeightRounded.toFixed(1)];
    var weightForHeightPercentile = (currentWeight/(medianWeightHeight)*100).toFixed(0);

    document.getElementById('weight_for_height').value = weightForHeightPercentile;

    displayText += "<div><span class='title'>Weight for height:</span>";

    if (weightForHeightPercentile >= 80) {
      displayText += "<span class='goodWeightForHeight'>" + weightForHeightPercentile + "%</span><br>";
    } else if (weightForHeightPercentile >= 75) {
      displayText += "<span class='medWeightForHeight'>" + weightForHeightPercentile + "%</span>" + " <span class='recommendation'> Moderate wasting</span><br>";
    } else {
      displayText += "<span class='lowWeightForHeight'>" + weightForHeightPercentile + "%</span> <br/><span class='recommendation'> Severe wasting</span><br>";
    }
    displayText += "</div>";
  }

  function showBMI() {
    currentBmi = (currentWeight/(currentHeight*currentHeight)*10000).toFixed(1);
    document.getElementById('bmi').value = currentBmi;

    displayText = "<div><span class='title'>BMI:</span>";
    if (currentBmi > 18.5) {
      displayText += currentBmi;
    } else if (currentBmi > 17.0) {
      displayText += "<span class='lowBMIcounselling'>" + currentBmi + "</span>" + "<br/><span class='recommendation'> Eligible for counseling</span>";
    } else {
     displayText += "<span class='lowBMI'>" + currentBmi + "</span><br/><span class='recommendation'>Eligible for therapeutic feeding</span>";
    }
    displayText += "</div>";
 }

</script>

<form method='post' action='/encounters/create'>
	<input type='hidden' name='program' value='CHRONIC CARE PROGRAM' />
	<input type='hidden' name='encounter_type' value='VITALS' />
	<input type='hidden' name='patient_id' value='<%= @patient.id %>' />
	<input type='hidden' name='user_id' value='<%= @user.id %>' />

  <%
    vital_signs = ["","Temperature","Respiratory Rate","Blood Pressure",
    "Pulse Rate", "Weight", "Height","Oxygen Saturation","Waist circumference"]
  %>

	<%= select_tag "choice", options_for_select(vital_signs),
		{	:helpText => 'Select vital signs',
			:id => "choice",
			:multiple => true } %>

	  <input type='text' id='waist_circumference'
	  name='concept[Head circumference]'
	  helpText='Waist circumference (in cm) '
	  field_type='number'
	  pos='3'
	  allowFreeText = 'true'
	 condition = "getSelected().match(/WAIST\sCIRCUMFERENCE/i)"
	 min = 10
	 max = 300
	 units = 'cm'
	 tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"/>/>

	 <input type='text' id='temperature'
	 name='concept[Temperature]'
	 helpText='Temperature '
	 field_type='number'
	 pos='9'
	 allowFreeText = 'true'
	 condition = "getSelected().match(/TEMPERATURE/i)"
	 min = 35
	 max = 41
	 units = 'Degrees Celcius'
	 tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"/>

	 <input type='text' id='respiratory_rate'
	 name='concept[Respiratory rate]'
	 helpText='Respiratory rate '
	 field_type='number'
	 pos='6'
	 min = 8
	 max = 65
	 condition = "getSelected().match(/RESPIRATORY\sRATE/i)"
	 absoluteMin = 0
	 absoluteMax = 250
	 tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"/>

	 <input type='text' id='systolic_blood_pressure'
	 name='concept[Systolic blood pressure]'
	 helpText='Systolic blood pressure '
	 field_type='number'
	 pos='4'
	 tt_pageStyleClass = "NumbersWithUnknown"
	 tt_onLoad = "timedEvent = setTimeout('calculateBP(1)', 100);"
	 tt_onUnLoad = "clearTimeout(timedEvent);"
	 condition = "getSelected().match(/BLOOD\sPRESSURE/i)"
	 absoluteMin = 0
	 max => 250/>

	 <input type='text' id='diastolic_blood_pressure'
	  name='concept[Diastolic blood pressure]'
	  helpText='Diastolic blood pressure '
	  field_type='number'
	  pos='5'
	  tt_pageStyleClass = "NumbersWithUnknown"
	  tt_onLoad = "timedEvent = setTimeout('calculateBP(2)', 100);"
	  tt_onUnLoad = "clearTimeout(timedEvent);"
	  condition = "getSelected().match(/BLOOD\sPRESSURE/i)"
	  absoluteMin = 0
	  max = 180 />

	 <input type='text' id='pulse'
	 name='concept[Pulse]'
	 helpText='Pulse rate '
	 field_type='number'
	 pos='7'
	 condition = "getSelected().match(/PULSE\sRATE/i)"
	 min = 50
	 max = 120
	 condition = "getSelected().match(/PULSE\sRATE/i)"
	 units = 'bpm'
	 tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"/>

	<input type='text' id='weight'
	name='concept[Weight]'
	helpText='Weight '
	field_type='number'  
	pos='1'
	condition="getSelected().match(/WEIGHT/i)"
	tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"
	absoluteMin = 0
	absoluteMax = 250
	units = 'kg'/>

	<input type='text' id='height'
	name='concept[Height (cm)]'
	helpText='Height (cm)'
	field_type='number'
	condition = "getSelected().match(/HEIGHT/i)"
	tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"
	min = 50
	max = 180/>

   <input type='text'
   id='oxygen'
   name='concept[Blood Oxygen saturation]'
   helpText='Oxygen saturation '
   field_type='number'
   pos='8'
   min = 85
   max = 100
   condition = "getSelected().match(/OXYGEN\sSATURATION/i)"
   absoluteMin = 0
   absoluteMax = 250
   tt_pageStyleClass = "Numeric NumbersWithUnknownAndDecimal"/>
   
  <label for='summary'>Summary</label>
	<%= text_field_tag :summary, nil, {
	  :tt_onLoad => "showSelectedConditions();__$('keyboard').style.display = 'none';",
	  :optional => "true",
	  :tt_pageStyleClass => "NoControls" } %>

	<% if @retrospective %>
		<p><label for="filter_provider">Staff who provided the information (Provider)</label></br>
		<%= text_field "filter" , 'provider', :helpText => 'Staff who provided the information (Provider)', :ajaxURL => '/user/username?username=' %></p>
	<% else %>
		<%= hidden_field_tag "filter[provider]", nil %>
	<% end %>

	<%= submit_tag "Finish" %>
</form>